{
    "contents" : "---\ntitle: \"Student Math Performance\"\noutput: html_document\n---\n\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.\n\nWhen you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n\n```{r}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(ggthemr)\nggthemr('flat')\nmat_perf = read.csv('student-mat.csv', sep = ';')\nsummary(mat_perf)\n```\n\nYou can also embed plots, for example:\n\n```{r, echo=FALSE, warning = FALSE}\nggplot(mat_perf) + geom_histogram(aes(x=absences))\nggplot(mat_perf) + geom_histogram(aes(x=G1), binwidth=2)\nggplot(mat_perf) + geom_histogram(aes(x=G2), binwidth=2)\nggplot(mat_perf) + geom_histogram(aes(x=G3), binwidth=2)\n```\n\nNote that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.\n\n```{r}\ntest.stats = list(test.type = c(), test.value = c(), variable = c())\n\nfor (i in 1:30) {\n  if (is.factor(mat_perf[,i])) {\n    anova = summary(aov(G3 ~ mat_perf[,i], data=mat_perf))\n    test.stats$test.type[i] = \"F test\"\n    test.stats$test.value[i] = unlist(anova)[7]\n    test.stats$variable[i] = names(mat_perf)[i]\n  }\n  else {\n    reg = summary(lm(G3 ~ mat_perf[,i], data=mat_perf))\n    test.stats$test.type[i] = \"t test\"\n    test.stats$test.value[i] = reg$coefficients[2,3]\n    test.stats$variable[i] = names(mat_perf)[i]\n  }\n    \n}\n\ntest.stats.df = arrange(data.frame(test.stats), desc(test.value))\ntest.stats.df$variable = reorder(test.stats.df$variable, -test.stats.df$test.value)\n```\n\nUnivariate estimates variable importance\n\n```{r, echo=FALSE, fig.width=12, fig.height=5, warning=FALSE}\nggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat=\"identity\") + facet_grid(.~test.type ,  scales=\"free\", space = \"free\") + theme(axis.text.x = element_text(angle = 45, vjust=.75, size=11))\n```\n\nTraining a random forest model using only the predictors with the highest univariate test values\n```{r, message=FALSE, warning=FALSE}\nkeep.vars = match(filter(test.stats.df, abs(test.value) >= 3)$variable, names(mat_perf))\nlibrary(caret)\nctrl = trainControl(method=\"repeatedcv\", number=10, selectionFunction = \"oneSE\")\n#in_train = createDataPartition(mat_perf$G3, p=.67, groups = 2)\nmat_perf$randu = runif(395)\n#mat_perf$G3.scaled = scale(mat_perf$G3)\ntrf = train(mat_perf[mat_perf$randu <= .67,keep.vars], mat_perf$G3[mat_perf$randu <= .67],\n            method=\"rf\", metric=\"RMSE\", data=mat_perf,\n            trControl=ctrl, importance=TRUE)\ntrf\nvarImp(trf)\ntest = mat_perf[mat_perf$randu > .67,]\ntest$pred.G3.keepvars = predict(trf, test, \"raw\")\nggplot(test, aes(x=G3, y=pred.G3.keepvars)) + geom_point() + stat_smooth()\nggplot(test, aes(x=G3, y=pred.G3.keepvars-G3)) + geom_point() + stat_smooth() + ggtitle('Residuals')\n```\n\nThis model had an r squared value of `r cor.test(test$G3, test$pred.G3.keepvars)$estimate[[1]]^2` and an RMSE of `r summary(lm(test$G3 ~ test$pred.G3.keepvars))$sigma`.\n\nTraining a random forest model using all predictors except the prior 2 test scores\n```{r, message=FALSE, warning=FALSE}\ntrf2 = train(mat_perf[mat_perf$randu <= .67,1:30], mat_perf$G3[mat_perf$randu <= .67],\n            method=\"rf\", metric=\"RMSE\", data=mat_perf,\n            trControl=ctrl, importance=TRUE)\ntrf2\nvarImp(trf2)\ntest$pred.g3.almostallvars = predict(trf2, test, \"raw\")\nggplot(test, aes(x=G3, y=pred.g3.almostallvars)) + geom_point() + stat_smooth()\nggplot(test, aes(x=G3, y=pred.g3.almostallvars-G3)) + geom_point() + stat_smooth() + ggtitle('Residuals')\n```\n\nThis model had an r squared value of `r cor.test(test$G3, test$pred.g3.almostallvars)$estimate[[1]]^2` and an RMSE of `r summary(lm(test$G3 ~ test$pred.g3.almostallvars))$sigma`.\n\n```{r, message=FALSE, warning=FALSE}\ntrf3 = train(mat_perf[mat_perf$randu <= .67,c(1:30,32)], mat_perf$G3[mat_perf$randu <= .67],\n            method=\"rf\", metric=\"RMSE\", data=mat_perf,\n            trControl=ctrl, importance=TRUE)\ntrf3\nvarImp(trf3)\ntest$pred.g3.plusG2 = predict(trf3, test, \"raw\")\nggplot(test, aes(x=G3, y=pred.g3.plusG2)) + geom_point() + stat_smooth()\nggplot(test, aes(x=G3, y=pred.g3.plusG2-G3)) + geom_point() + stat_smooth() + ggtitle('Residuals')\n```\n\nThis model had an r squared value of `r cor.test(test$G3, test$pred.g3.plusG2)$estimate[[1]]^2` and an RMSE of `r summary(lm(test$G3 ~ test$pred.g3.plusG2))$sigma`.",
    "created" : 1431877441908.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4105363957",
    "id" : "495AC07",
    "lastKnownWriteTime" : 1431878102,
    "path" : "~/Student Performance/results.Rmd",
    "project_path" : "results.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_markdown"
}