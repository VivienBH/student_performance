library(ggthemr)
ggthemr('dust')
ggthemr('flat')
library(ggthemr)
ggthemr('flat')
mat_perf = read.csv('student-mat.csv', sep = ';')
summary(mat_perf)
names(mat_perf)
1:29
test.stats = list(test.type = c(), test.value = c(), variable = c())
str(mat_perf$school)
str(mat_perf)
is.factor(mat_perf$school)
b = aov(G3 ~ school, data=mat_perf)
names(b)
b$coefficients
b$model
bs = summary(b)
names(bs)
bs
b[1,4]
b[4]
colnames(bs)
bs[1]
bs[1][4]
bs[1,3]
bs[2]
bs[[1]]
bs[[3]]
bs[1][3]
bs[1][2]
names(b)
b$effects
b$coefficients
names(b)
b$terms
names(bs)
b[1][1]
bs[1][1]
bs[1][4]
str(bs)
bs$"F value"
bs$data.frame
bs$data.frame$"F value"
str(bs)
bs$summary.aov
bs[[1]]["F value"]
bs[[1]]["F value"][1]
bs[[1]]["F value"][[1]]
bs[[1]]["F value"][[1]][1]
unlist(bs)
unlist(bs)$"F value1"
unlist(bs)[8]
unlist(bs)[7]
data.frame(bs)
library(plyr)
ldply(bs)
ldply(bs)$"F value"
ldply(bs)$"F value"[1]
b = lm(G3 ~ absences, data=mat_perf)
names(b)
b$model
names(b)
b$coefficients
bs = summary(b)
names(bs)
b$terms
names(b)
names(bs)
bs$coefficients
bs$coefficients[2,3]
test.stats = list(test.type = c(), test.value = c(), variable = c())
for (i in 1:30) {
if (is.factor(mat_perf[,i])) {
anova = summary(aov(G3 ~ mat_perf[,i], data=mat_perf))
test.stats$test.type[i] = "F test"
test.stats$test.value[i] = unlist(anova)[7]
test.stats$variable = names(mat_perf)[i]
}
else {
reg = summary(lm(G3 ~ mat_perf[,i], data=mat_perf))
test.stats$test.type[i] = "t test"
test.stats$test.value[i] = reg$coefficients[2,3]
test.stats$variable = names(mat_perf[i])
}
}
test.stats
test.stats = list(test.type = c(), test.value = c(), variable = c())
for (i in 1:30) {
if (is.factor(mat_perf[,i])) {
anova = summary(aov(G3 ~ mat_perf[,i], data=mat_perf))
test.stats$test.type[i] = "F test"
test.stats$test.value[i] = unlist(anova)[7]
test.stats$variable = names(mat_perf)[i]
}
else {
reg = summary(lm(G3 ~ mat_perf[,i], data=mat_perf))
test.stats$test.type[i] = "t test"
test.stats$test.value[i] = reg$coefficients[2,3]
test.stats$variable[i] = names(mat_perf[i])
}
}
test.stats
test.stats = list(test.type = c(), test.value = c(), variable = c())
for (i in 1:30) {
if (is.factor(mat_perf[,i])) {
anova = summary(aov(G3 ~ mat_perf[,i], data=mat_perf))
test.stats$test.type[i] = "F test"
test.stats$test.value[i] = unlist(anova)[7]
test.stats$variable = names(mat_perf)[i]
}
else {
reg = summary(lm(G3 ~ mat_perf[,i], data=mat_perf))
test.stats$test.type[i] = "t test"
test.stats$test.value[i] = reg$coefficients[2,3]
test.stats$variable[i] = names(mat_perf)[i]
}
}
test.stats
test.stats = list(test.type = c(), test.value = c(), variable = c())
for (i in 1:30) {
if (is.factor(mat_perf[,i])) {
anova = summary(aov(G3 ~ mat_perf[,i], data=mat_perf))
test.stats$test.type[i] = "F test"
test.stats$test.value[i] = unlist(anova)[7]
test.stats$variable[i] = names(mat_perf)[i]
}
else {
reg = summary(lm(G3 ~ mat_perf[,i], data=mat_perf))
test.stats$test.type[i] = "t test"
test.stats$test.value[i] = reg$coefficients[2,3]
test.stats$variable[i] = names(mat_perf)[i]
}
}
test.stats
data.frame(test.stats)
library(dplyr)
arrange(data.frame(test.stats), desc(test.value))
test.stats.df = arrange(data.frame(test.stats), desc(test.value))
ggplot(test.stats.df) + geom_bar(aes(x=variable, y=test.value)) + facet_grid(.~test.type)
ggplot(test.stats.df) + geom_bar(aes(x=variable, y=test.value, stat="identity")) + facet_grid(test.type~)
ggplot(test.stats.df) + geom_bar(aes(x=variable, y=test.value, stat="identity")) + facet_grid(test.type~.)
ggplot(test.stats.df) + geom_bar(aes(x=variable, y=test.value), stat="identity") + facet_grid(test.type~.)
ggplot(test.stats.df) + geom_bar(aes(x=variable, y=test.value), stat="identity") + facet_grid(.~test.type)
ggplot(test.stats.df) + geom_bar(aes(x=as.character(variable), y=test.value), stat="identity") + facet_grid(.~test.type)
str(test.stats.df)
?data.frame
test.stats.df = arrange(data.frame(test.stats, stringsAsFactors = FALSE), desc(test.value))
ggplot(test.stats.df) + geom_bar(aes(x=variable, y=test.value), stat="identity") + facet_grid(.~test.type)
str(test.stats.df)
ggplot(test.stats.df) + geom_bar(aes(x=variable, y=test.value), stat="identity") + facet_grid(~test.type)
library(ggplot2)
ggplot(test.stats.df) + geom_bar(aes(x=variable, y=test.value), stat="identity") + facet_grid(~test.type)
detach(ggthemr)
detach("ggthemr")
detach("package:ggthemr", unload=TRUE)
ggplot(test.stats.df) + geom_bar(aes(x=variable, y=test.value), stat="identity") + facet_grid(~test.type)
library(ggplot2)
mat_perf = read.csv('student-mat.csv', sep = ';')
test.stats = list(test.type = c(), test.value = c(), variable = c())
for (i in 1:30) {
if (is.factor(mat_perf[,i])) {
anova = summary(aov(G3 ~ mat_perf[,i], data=mat_perf))
test.stats$test.type[i] = "F test"
test.stats$test.value[i] = unlist(anova)[7]
test.stats$variable[i] = names(mat_perf)[i]
}
else {
reg = summary(lm(G3 ~ mat_perf[,i], data=mat_perf))
test.stats$test.type[i] = "t test"
test.stats$test.value[i] = reg$coefficients[2,3]
test.stats$variable[i] = names(mat_perf)[i]
}
}
test.stats.df = arrange(data.frame(test.stats, stringsAsFactors = FALSE), desc(test.value))
library(dplyr)
test.stats.df = arrange(data.frame(test.stats, stringsAsFactors = FALSE), desc(test.value))
ggplot(test.stats.df) + geom_bar(aes(x=variable, y=test.value), stat="identity") + facet_grid(~test.type)
library(ggthemr)
ggthemr('flat')
ggplot(test.stats.df) + geom_bar(aes(x=variable, y=test.value), stat="identity") + facet_grid(.~test.type, scales="free_y")
ggplot(test.stats.df) + geom_bar(aes(x=variable, y=test.value), stat="identity") + facet_wrap(.~test.type, scales="free_y")
```{r}
ggplot(test.stats.df) + geom_bar(aes(x=variable, y=test.value), stat="identity") + facet_wrap(~test.type, ncol=1, scales="free_y")
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_wrap(~test.type, ncol=1, scales="free_y")
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_wrap(test.type ~., ncol=1, scales="free_y")
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_wrap(test.type ~, ncol=1, scales="free_y")
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_wrap(test.type ~ ., nrow=1, scales="free_y")
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_grid(test.type ~ .,  scales="free", space = "free")
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_grid(.~test.type ,  scales="free", space = "free")
?reoder
?reorder
test.stats.df = arrange(data.frame(test.stats), desc(test.value))
test.stats.df$variable = reorder(test.stats.df$variable, -test.stats.df$test.value)
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_grid(.~test.type ,  scales="free", space = "free")
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_grid(.~test.type ,  scales="free", space = "free") + theme(axis.text.x = element_text(angle = -90))
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_grid(.~test.type ,  scales="free", space = "free") + theme(axis.text.x = element_text(angle = 90))
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_grid(.~test.type ,  scales="free", space = "free") + coord_flip()
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_grid(.~test.type ,  scales="free", space = "free") + theme(axis.text.x = element_text(angle = 45))
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_grid(.~test.type ,  scales="free", space = "free") + theme(axis.text.x = element_text(angle = 45, vjust=1))
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_grid(.~test.type ,  scales="free", space = "free") + theme(axis.text.x = element_text(angle = 45, vjust=2))
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_grid(.~test.type ,  scales="free", space = "free") + theme(axis.text.x = element_text(angle = 45, vjust=-2))
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_grid(.~test.type ,  scales="free", space = "free") + theme(axis.text.x = element_text(angle = 45, vjust=-.5))
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_grid(.~test.type ,  scales="free", space = "free") + theme(axis.text.x = element_text(angle = 45, vjust=-.1))
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_grid(.~test.type ,  scales="free", space = "free") + theme(axis.text.x = element_text(angle = 45, vjust=0))
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_grid(.~test.type ,  scales="free", space = "free") + theme(axis.text.x = element_text(angle = 45, vjust=.5))
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_grid(.~test.type ,  scales="free", space = "free") + theme(axis.text.x = element_text(angle = 45, vjust=.75))
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_grid(.~test.type ,  scales="free", space = "free") + theme(axis.text.x = element_text(angle = 45, vjust=.75, size=14))
ggplot(test.stats.df, aes(x=variable, y=test.value)) + geom_bar(stat="identity") + facet_grid(.~test.type ,  scales="free", space = "free") + theme(axis.text.x = element_text(angle = 45, vjust=.75, size=13))
test.stats.df
filter(test.stats.df, test.value >= abs(3))
library(dplyr)
filter(test.stats.df, test.value >= abs(3))
filter(test.stats.df, abs(test.value) >= 3)
filter(test.stats.df, abs(test.value) >= 3)$variable
which(names(mat_perf) == filter(test.stats.df, abs(test.value) >= 3)$variable)
filter(test.stats.df, abs(test.value) >= 3)$variable == which(names(mat_perf)
)
filter(test.stats.df, abs(test.value) >= 3)$variable == names(mat_perf)
Indometh
match(filter(test.stats.df, abs(test.value) >= 3)$variable, names(mat_perf))
filter(test.stats.df, abs(test.value) >= 3)$variable
names(mat_perf)[match(filter(test.stats.df, abs(test.value) >= 3)$variable, names(mat_perf))]
keep.vars = match(filter(test.stats.df, abs(test.value) >= 3)$variable, names(mat_perf))
library(caret)
install.packages("caret")
keep.vars = match(filter(test.stats.df, abs(test.value) >= 3)$variable, names(mat_perf))
library(caret)
?createDataPartition
ctrl = trainControl(method="repeatedcv", number=10)
in_train = createDataPartition(mat_perf$G3, p=.67, groups = 2)
in_train
length(in_train)
length(in_train$Resample1)
hist(in_train$Resample1)
rownames(mat_perf)
as.numeric(rownames(mat_perf))
as.numeric(rownames(mat_perf))[-in_train$Resample1]
hist(as.numeric(rownames(mat_perf))[-in_train$Resample1])
length(as.numeric(rownames(mat_perf))[-in_train$Resample1])
130/395
?train
ctrl = trainControl(method="repeatedcv", number=10, selectionFunction = "oneSE")
trf = train(mat_perf[,keep.vars], mat_perf$G3,
method="rf", metric="MSE", data=mat_perf,
trControl=ctrl, subset=in_train)
trf
names(mat_perf)
trf = train(mat_perf[,1:30], mat_perf$G3,
method="rf", metric="RMSE", data=mat_perf,
trControl=ctrl, subset=in_train)
trf
varImp(trf)
importance(trf)
varImp(trf)
varImp(trf)
varImp
rf = train(mat_perf[,keep.vars], mat_perf$G3,
method="rf", metric="RMSE", data=mat_perf,
trControl=ctrl, subset=in_train)
rf
varImp(rf)
names(mat_perf)[keep.vars]
trf = train(G3 ~ higher + romantic + address + Medu
+ sex + paid + internet + Mjob + Fedu +
age + failures,
method="rf", metric="RMSE", data=mat_perf,
trControl=ctrl, subset=in_train)
in_train
trf = train(G3 ~ higher + romantic + address + Medu
+ sex + paid + internet + Mjob + Fedu +
age + failures,
method="rf", metric="RMSE", data=mat_perf,
trControl=ctrl, subset=in_train$Resample1)
trf
varImp(trf)
trf = train(mat_perf[,keep.vars], G3,
method="rf", metric="RMSE", data=mat_perf,
trControl=ctrl, importance=TRUE, subset=in_train$Resample1)
trf = train(mat_perf[,keep.vars], mat_perf$G3,
method="rf", metric="RMSE", data=mat_perf,
trControl=ctrl, importance=TRUE, subset=in_train$Resample1)
varImp(trf)
tgbm = train(mat_perf[,keep.vars], mat_perf$G3,
method="gbm", metric="RMSE", data=mat_perf,
trControl=ctrl, importance=TRUE, subset=in_train$Resample1)
tgbm = train(mat_perf[,keep.vars], mat_perf$G3,
method="gbm",  data=mat_perf,
trControl=ctrl, importance=TRUE, subset=in_train$Resample1)
warnings()
tgbm = train(mat_perf[,keep.vars], mat_perf$G3,
method="gbm",  data=mat_perf,
trControl=ctrl,  subset=in_train$Resample1)
tcit = train(mat_perf[,keep.vars], mat_perf$G3,
method="ctree",  data=mat_perf,
trControl=ctrl,  subset=in_train$Resample1)
warnings()
tcit = train(mat_perf[,keep.vars], mat_perf$G3,
method="ctree",
trControl=ctrl,  subset=in_train$Resample1)
summary(mat_perf$G3)
sum(is.na(mat_perf$G3))
names(mat_perf)
tcit = train(mat_perf[,keep.vars], mat_perf[,33],
method="ctree",
trControl=ctrl,  subset=in_train$Resample1)
tcit = train(mat_perf[,keep.vars], mat_perf[,33],
method="cforest",
trControl=ctrl,  subset=in_train$Resample1)
tcit = train(mat_perf[,keep.vars], mat_perf[,33],
data = mat_perf,
method="cforest",
trControl=ctrl,  subset=in_train$Resample1)
warnings()
tcit = train(mat_perf[,keep.vars], mat_perf[,33],
method="cforest",
trControl=ctrl,  subset=in_train$Resample1)
cit.ctrl = trainControl(method="repeatedcv", number=5, selectionFunction = "oneSE")
tcit = train(mat_perf[,keep.vars], mat_perf[,33],
method="cforest",
trControl=cit.ctrl,  subset=in_train$Resample1)
trf = train(mat_perf[,keep.vars], mat_perf$G3,
method="rf", metric="RMSE", data=mat_perf,
trControl=ctrl, importance=TRUE, subset=in_train$Resample1)
trf
test = mat_perf[-in_train,]
test = mat_perf[-in_train$Resample1,]
test$pred.G3 = predict(trf, test, "raw")
library(ggplot2)
library(dplyr)
library(ggthemr)
ggthemr('flat')
?"randomForest"
varImp(trf2)
ggplot(test, aes(x=failures, y=G3)) + geom_point() + stat_smooth()
ggplot(test, aes(x=failures, y=G3)) + geom_point() + stat_smooth(method="lm")
ggplot(test, aes(x=absences, y=G3)) + geom_point() + stat_smooth(method="lm")
mat_perf$G3.scaled = scale(mat_perf$G3)
trf = train(mat_perf[,keep.vars], mat_perf$G3.scaled,
method="rf", metric="RMSE", data=mat_perf,
trControl=ctrl, importance=TRUE, subset=in_train$Resample1)
trf
varImp(trf)
test = mat_perf[-in_train$Resample1,]
test$pred.G3.keepvars = predict(trf, test, "raw")
ggplot(test, aes(x=G3.scaled, y=pred.G3.keepvars)) + geom_point() + stat_smooth()
trf2 = train(mat_perf[,1:30], mat_perf$G3.scaled,
method="rf", metric="RMSE", data=mat_perf,
trControl=ctrl, importance=TRUE, subset=in_train$Resample1)
trf2
varImp(trf2)
test$pred.g3.almostallvars = predict(trf2, test, "raw")
ggplot(test, aes(x=G3.scaled, y=pred.g3.almostallvars)) + geom_point() + stat_smooth()
ggplot(test, aes(x=G3.scaled, y=pred.g3.almostallvars-G3.scaled)) + geom_point() + stat_smooth() + ggtitle('Residuals')
cor.test(test$G3.scaled, test$G3)
cor.test(test$G3.scaled, test$pred.g3.almostallvars)
0.9609669^2
trf = train(mat_perf[,keep.vars], mat_perf$G3,
method="rf", metric="RMSE", data=mat_perf,
trControl=ctrl, importance=TRUE, subset=in_train$Resample1)
trf
varImp(trf)
test = mat_perf[-in_train$Resample1,]
test$pred.G3.keepvars = predict(trf, test, "raw")
ggplot(test, aes(x=G3, y=pred.G3.keepvars)) + geom_point() + stat_smooth()
trf2 = train(mat_perf[,1:30], mat_perf$G3,
method="rf", metric="RMSE", data=mat_perf,
trControl=ctrl, importance=TRUE, subset=in_train$Resample1)
trf2
varImp(trf2)
test$pred.g3.almostallvars = predict(trf2, test, "raw")
ggplot(test, aes(x=G3, y=pred.g3.almostallvars)) + geom_point() + stat_smooth()
ggplot(test, aes(x=G3, y=pred.g3.almostallvars-G3.scaled)) + geom_point() + stat_smooth() + ggtitle('Residuals')
ggplot(test, aes(x=G3, y=pred.g3.almostallvars-G3)) + geom_point() + stat_smooth() + ggtitle('Residuals')
names(test)
cor(test$G3, test$pred.g3.almostallvars)
cor.test(test$G3, test$pred.g3.almostallvars)
0.9584361^2
names(cor.test(test$G3, test$pred.g3.almostallvars))
cor.test(test$G3, test$pred.g3.almostallvars)$statistic
cor.test(test$G3, test$pred.g3.almostallvars)$estimate
cor.test(test$G3, test$pred.g3.almostallvars)$estimate^2
cor.test(test$G3, test$pred.g3.almostallvars)$estimate[1]^2
cor.test(test$G3, test$pred.g3.almostallvars)$estimate[[1]]^2
summary(lm(test$pred.g3.almostallvars ~ test$G3))
summary(lm(test$G3 ~ test$pred.g3.almostallvars))
names(summary(lm(test$G3 ~ test$pred.g3.almostallvars)))
std(summary(lm(test$G3 ~ test$pred.g3.almostallvars))$residuals)
stderr(summary(lm(test$G3 ~ test$pred.g3.almostallvars))$residuals)
stderr(summary(lm(test$G3 ~ test$pred.g3.almostallvars))$residuals))
sd(summary(lm(test$G3 ~ test$pred.g3.almostallvars))$residuals)
str(summary(lm(test$G3 ~ test$pred.g3.almostallvars)))
summary(lm(test$G3 ~ test$pred.g3.almostallvars))$sigma
mat_perf$randu = runif(395)
names(mat_perf)
cor.test(test$G3, test$pred.g3.almostallvars)
names(trf2)
names(mat_perf)
setdiff(names(mat_perf), c("G1","G2","G3"))
c(c("G1","G2",G3"),setdiff(names(mat_perf), c("G1","G2","G3")))
c(c("G1","G2","G3"),setdiff(names(mat_perf), c("G1","G2","G3")))
